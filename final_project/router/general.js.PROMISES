const express = require('express');
let books = require("./booksdb.js");
let isValid = require("./auth_users.js").isValid;
let users = require("./auth_users.js").users;
const public_users = express.Router();


public_users.post("/register", (req, res) => {
    const { username, password } = req.body;
  
    // Check if username and password are provided
    if (!username || !password) {
      return res.status(400).json({ message: "Username and password are required" });
    }
  
    // Check if username is already taken
    const found = users.some((user) => user.username === username);    

    if (!found) {
    // Add the new user to the users object
        users.push({"username":username, "password":password});
        return res.status(200).json({ message: "Customer registered successfully" });
    }
    else return res.status(409).json({ message: "Username already taken" });
  })

// Get the book list available in the shop
// Get all books
public_users.get("/", (req, res) => {
  new Promise((resolve, reject) => {
    try {
      const booksJSON = JSON.stringify(books, null, 4);
      resolve({ status: 200, body: booksJSON });
    } catch (error) {
      console.error(error);
      reject({ status: 500, message: "Error occurred" });
    }
  })
  .then((response) => res.send(response.body))
  .catch((error) => res.status(error.status).send({ message: error.message }));
});

// Get book details based on ISBN
public_users.get('/isbn/:isbn', async function(req, res) {
  try {
    const isbn = req.params.isbn;
    const book = books[isbn];

    if (book) {
      await new Promise((resolve, reject) => resolve());
      res.json(book);
    } else {
      await new Promise((resolve, reject) => resolve());
      res.status(404).json({ message: "Book not found" });
    }
  } catch (error) {
    console.error(error);
    res.status(500).send({ message: "Error occurred" });
  }
});
// Get book details based on author
public_users.get('/author/:author', (req, res) => {
  new Promise((resolve, reject) => {
    try {
      const author = req.params.author.toLowerCase();
      const filteredBooks = Object.values(books).filter(book => book.author.toLowerCase() === author);

      if (filteredBooks.length > 0) {
        resolve({ status: 200, body: filteredBooks });
      } else {
        resolve({ status: 404, message: "No books found for this author" });
      }
    } catch (error) {
      console.error(error);
      reject({ status: 500, message: "Error occurred" });
    }
  })
  .then((response) => res.json(response.body))
  .catch((error) => res.status(error.status).send({ message: error.message }));
});

// Get all books based on title
public_users.get('/title/:title', (req, res) => {
  new Promise((resolve, reject) => {
    try {
      const title = req.params.title.toLowerCase();
      const filteredBooks = Object.values(books).filter(book => book.title.toLowerCase() === title);

      if (filteredBooks.length > 0) {
        resolve({ status: 200, body: filteredBooks });
      } else {
        resolve({ status: 404, message: "No books found for this author" });
      }
    } catch (error) {
      console.error(error);
      reject({ status: 500, message: "Error occurred" });
    }
  })
  .then((response) => res.json(response.body))
  .catch((error) => res.status(error.status).send({ message: error.message }));
});
 
module.exports.general = public_users;
